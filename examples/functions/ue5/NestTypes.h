// Code generated by "nestcsv"; YOU CAN ONLY EDIT WITHIN THE TAGGED REGIONS!

#pragma once

#include "NestTableDataBase.h"

//NESTCSV:NESTTYPES_EXTRA_INCLUDE_START

//NESTCSV:NESTTYPES_EXTRA_INCLUDE_END

#include "NestTypes.generated.h"

USTRUCT(BlueprintType)
struct FNestTypes : public FNestTableDataBase
{
    GENERATED_BODY()
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    int32 Int;
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    int64 Long;
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    double Float;
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    FString String;
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    FDateTime Time;
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    TSharedPtr<FJsonValue> Json;
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    TArray<int32> IntArray;
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    TArray<int64> LongArray;
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    TArray<double> FloatArray;
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    TArray<FString> StringArray;
    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    TArray<FDateTime> TimeArray;

    virtual bool Load(const TSharedPtr<FJsonObject>& JsonObject) override
    {
        if (!JsonObject.IsValid()) return false;
        FNestTypes _Result;

        if (!JsonObject.ToSharedRef()->TryGetNumberField(TEXT("Int"), _Result.Int)) return false;
        if (!JsonObject.ToSharedRef()->TryGetNumberField(TEXT("Long"), _Result.Long)) return false;
        if (!JsonObject.ToSharedRef()->TryGetNumberField(TEXT("Float"), _Result.Float)) return false;
        if (!JsonObject.ToSharedRef()->TryGetStringField(TEXT("String"), _Result.String)) return false;
        {
            FString TimeDtStr;
            if (!JsonObject.ToSharedRef()->TryGetStringField(TEXT("Time"), TimeDtStr)) return false;
            if (!FDateTime::ParseIso8601(*TimeDtStr, _Result.Time)) return false;
        }
        if (!JsonObject.ToSharedRef()->TryGetField(TEXT("Json"), _Result.Json)) return false;
        {
            const TArray<TSharedPtr<FJsonValue>>* IntArrayArray = nullptr;
            if (!JsonObject.ToSharedRef()->TryGetArrayField(TEXT("IntArray"), IntArrayArray)) return false;
            for (const auto& Item : *IntArrayArray)
            {
                int32 FieldItem;
                if (!Item->TryGetNumber(FieldItem)) return false;
                _Result.IntArray.Add(FieldItem);
            }
        }
        {
            const TArray<TSharedPtr<FJsonValue>>* LongArrayArray = nullptr;
            if (!JsonObject.ToSharedRef()->TryGetArrayField(TEXT("LongArray"), LongArrayArray)) return false;
            for (const auto& Item : *LongArrayArray)
            {
                int64 FieldItem;
                if (!Item->TryGetNumber(FieldItem)) return false;
                _Result.LongArray.Add(FieldItem);
            }
        }
        {
            const TArray<TSharedPtr<FJsonValue>>* FloatArrayArray = nullptr;
            if (!JsonObject.ToSharedRef()->TryGetArrayField(TEXT("FloatArray"), FloatArrayArray)) return false;
            for (const auto& Item : *FloatArrayArray)
            {
                double FieldItem;
                if (!Item->TryGetNumber(FieldItem)) return false;
                _Result.FloatArray.Add(FieldItem);
            }
        }
        {
            const TArray<TSharedPtr<FJsonValue>>* StringArrayArray = nullptr;
            if (!JsonObject.ToSharedRef()->TryGetArrayField(TEXT("StringArray"), StringArrayArray)) return false;
            for (const auto& Item : *StringArrayArray)
            {
                FString FieldItem;
                if (!Item->TryGetString(FieldItem)) return false;
                _Result.StringArray.Add(FieldItem);
            }
        }
        {
            const TArray<TSharedPtr<FJsonValue>>* TimeArrayArray = nullptr;
            if (!JsonObject.ToSharedRef()->TryGetArrayField(TEXT("TimeArray"), TimeArrayArray)) return false;
            for (const auto& Item : *TimeArrayArray)
            {
                FString DateTimeStr;
                if (!Item->TryGetString(DateTimeStr)) return false;
                FDateTime DateTime;
                if (!FDateTime::ParseIso8601(DateTimeStr, DateTime)) return false;
                _Result.TimeArray.Add(DateTime);
            }
        }

        *this = MoveTemp(_Result);
        return true;
    }

    //NESTCSV:NESTTYPES_EXTRA_BODY_START
    
    //NESTCSV:NESTTYPES_EXTRA_BODY_END
};
