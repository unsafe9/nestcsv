// Code generated by "nestcsv"; DO NOT EDIT.

package table

import (
	"context"
)

const (
	ComplexName = "complex"
	TypesName   = "types"
)

type TableHolder struct {
	Complex ComplexTable
	Types   TypesTable
}

var tables *TableHolder

type tablesContextKey struct{}

var tablesContextKeyInstance = tablesContextKey{}

func WithTables(ctx context.Context, t *TableHolder) context.Context {
	return context.WithValue(ctx, tablesContextKeyInstance, t)
}

func TablesFromContext(ctx context.Context) *TableHolder {
	t, _ := ctx.Value(tablesContextKeyInstance).(*TableHolder)
	return t
}

func LoadTablesFromFile(basePath string) (*TableHolder, error) {
	var t TableHolder
	if err := t.Complex.LoadFromFile(basePath); err != nil {
		return nil, err
	}
	if err := t.Types.LoadFromFile(basePath); err != nil {
		return nil, err
	}
	tables = &t
	return &t, nil
}

type TableBase interface {
	TableName() string
	GetRows() interface{}
	Load(data []byte) error
	LoadFromString(jsonString string) error
	LoadFromFile(basePath string) error
}

func (t *TableHolder) GetTables() []TableBase {
	return []TableBase{
		&t.Complex,
		&t.Types,
	}
}

func (t *TableHolder) GetTable(tableName string) TableBase {
	switch tableName {
	case ComplexName:
		return &t.Complex
	case TypesName:
		return &t.Types
	default:
		return nil
	}
}

func GetTables() *TableHolder {
	return tables
}

func GetTable(tableName string) TableBase {
	return tables.GetTable(tableName)
}

func GetComplexTable() *ComplexTable {
	return &tables.Complex
}

func GetTypesTable() *TypesTable {
	return &tables.Types
}
