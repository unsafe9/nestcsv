// Code generated by "nestcsv"; DO NOT EDIT.

package {{ .PackageName }}

{{- if .Context }}

import (
    "context"
)
{{- end }}

const (
{{- range .Tables }}
    {{ pascal .Struct.Name }}Name = "{{ .Struct.Name }}"
{{- end }}
)

type TableHolder struct{
{{- range .Tables }}
    {{ pascal .Struct.Name }} {{ pascal .Struct.Name }}Table
{{- end }}
}

{{- if .Singleton }}

var tables *TableHolder

{{- end }}

{{- if .Context }}

type tablesContextKey struct{}

var tablesContextKeyInstance = tablesContextKey{}

func WithTables(ctx context.Context, t *TableHolder) context.Context {
    return context.WithValue(ctx, tablesContextKeyInstance, t)
}

func TablesFromContext(ctx context.Context) *TableHolder {
    t, _ := ctx.Value(tablesContextKeyInstance).(*TableHolder)
    return t
}
{{- end }}

func LoadTablesFromFile(basePath string) (*TableHolder, error) {
    var t TableHolder
{{- range .Tables }}
    if err := t.{{ pascal .Struct.Name }}.LoadFromFile(basePath); err != nil {
        return nil, err
    }
{{- end }}
{{- if .Singleton }}
    tables = &t
{{- end }}
    return &t, nil
}

type TableBase interface {
    TableName() string
    GetRows() interface{}
    Load(data []byte) error
    LoadFromString(jsonString string) error
    LoadFromFile(basePath string) error
}


func (t *TableHolder) GetTables() []TableBase {
    return []TableBase{
{{- range .Tables }}
        &t.{{ pascal .Struct.Name }},
{{- end }}
    }
}

func (t *TableHolder) GetTable(tableName string) TableBase {
    switch tableName {
{{- range .Tables }}
    case {{ pascal .Name }}Name:
        return &t.{{ pascal .Struct.Name }}
{{- end }}
    default:
        return nil
    }
}

{{- if .Singleton }}

func GetTables() *TableHolder {
    return tables
}

func GetTable(tableName string) TableBase {
    return tables.GetTable(tableName)
}

{{- range .Tables }}

func Get{{ pascal .Struct.Name }}Table() *{{ pascal .Struct.Name }}Table {
    return &tables.{{ pascal .Struct.Name }}
}
{{- end }}

{{- end }}
