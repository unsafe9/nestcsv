{{- with .File -}}
// Code generated by "nestcsv"; DO NOT EDIT.

package {{ $.PackageName }}

import (
{{- if .IsTable }}
    "path/filepath"
    "encoding/json"
    "os"
{{- end }}
{{- if has .FieldTypes "time" }}
    "time"
{{- end }}
)

{{ range append .AnonymousStructs .Struct }}
type {{ pascal .Name }} struct {
{{- range .Fields }}
    {{ pascal .Name }} {{ fieldType . }} `json:"{{ .Name }}"`
{{- end }}
}
{{ end }}

{{ if .IsTable }}
type {{ pascal .Struct.Name }}Table struct{
    {{- if .IsMap }}
    Rows map[string]{{ pascal .Struct.Name }}
    {{- else }}
    Rows []{{ pascal .Struct.Name }}
    {{- end }}
}

func (t *{{ pascal .Struct.Name }}Table) SheetName() string {
    return "{{ .Struct.Name }}"
}

func (t *{{ pascal .Struct.Name }}Table) GetRows() interface{} {
    return t.Rows
}

func (t *{{ pascal .Struct.Name }}Table) Load(data []byte) error {
    return json.Unmarshal(data, &t.Rows)
}

func (t *{{ pascal .Struct.Name }}Table) LoadFromString(jsonString string) error {
    return t.Load([]byte(jsonString))
}
   
func (t *{{ pascal .Struct.Name }}Table) LoadFromFile(basePath string) error {
    file, err := os.Open(filepath.Join(basePath, "{{ .Name }}.json"))
    if err != nil {
        return err
    }
    defer file.Close()

    return json.NewDecoder(file).Decode(&t.Rows)
}
{{- end }}
{{- end -}}