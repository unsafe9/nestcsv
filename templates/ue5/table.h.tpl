{{- with .File -}}
// Code generated by "nestcsv"; YOU CAN ONLY EDIT WITHIN THE TAGGED REGIONS!

#pragma once

#include "{{ $.Prefix }}TableBase.h"
#include "{{ $.Prefix }}{{ pascal .Name }}.h"

{{ $extraInclude := list $.Prefix .Name "_EXTRA_INCLUDE" | join "" | upper -}}
//NESTCSV:{{ $extraInclude }}_START
{{ index $.ExistingContent $extraInclude | default "" }}
//NESTCSV:{{ $extraInclude }}_END

#include "{{ $.Prefix }}{{ pascal .Name }}Table.generated.h"

USTRUCT(BlueprintType)
struct F{{ $.Prefix }}{{ pascal .Name }}Table : public F{{ $.Prefix }}TableBase
{
    GENERATED_BODY()

    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
    {{- if .IsMap }}
    TMap<FString, F{{ $.Prefix }}{{ pascal .Name }}> Rows;
    {{- else }}
    TArray<F{{ $.Prefix }}{{ pascal .Name }}> Rows;
    {{- end }}
    
    virtual FString GetSheetName() const override
    {
        return TEXT("{{ .Name }}");
    }

    virtual bool Load(const TSharedPtr<FJsonValue>& JsonValue) override
    {
        if (!JsonValue.IsValid()) return false;
        {{- if .IsMap }}
        TMap<FString, F{{ $.Prefix }}{{ pascal .Name }}> _Result;

        const TSharedPtr<FJsonObject>* RowsMap = nullptr;
        if (!JsonValue->TryGetObject(RowsMap)) return false;
        for (const auto& Row : (*RowsMap)->Values)
        {
            const TSharedPtr<FJsonObject> *RowValue = nullptr;
            if (!Row.Value->TryGetObject(RowValue)) return false;
            F{{ $.Prefix }}{{ pascal .Name }} RowItem;
            if (!RowItem.Load(*RowValue)) return false;
            _Result.Add(Row.Key, RowItem);
        }
        {{- else }}
        TArray<F{{ $.Prefix }}{{ pascal .Name }}> _Result;

        const TArray<TSharedPtr<FJsonValue>>* RowsArray = nullptr;
        if (!JsonValue->TryGetArray(RowsArray)) return false;
        for (const auto& Row : *RowsArray)
        {
            const TSharedPtr<FJsonObject> *RowValue = nullptr;
            if (!Row->TryGetObject(RowValue)) return false;
            F{{ $.Prefix }}{{ pascal .Name }} RowItem;
            if (!RowItem.Load(*RowValue)) return false;
            _Result.Add(RowItem);
        }
        {{- end }}

        Rows = MoveTemp(_Result);
        return true;
    }
{{- if or .IDField .IsMap }}

    const F{{ $.Prefix }}{{ pascal .Name }}* Find({{ fieldPrimitiveType .IDFieldType }} ID) const
    {
        {{- if .IsMap }}
        {{- if eq .IDFieldType "int" }}
        return Rows.Find(FString::FromInt(ID));
        {{- else if eq .IDFieldType "long" }}
        return Rows.Find(FString::Printf(TEXT("%lld"), ID));
        {{- else }}
        return Rows.Find(ID);
        {{- end }}
        {{- else }}
        return Rows.FindByPredicate([ID](const F{{ $.Prefix }}{{ pascal .Name }}& Row) { return Row.{{ .IDField.Name }} == ID; });
        {{- end }}
    }
                        
    const F{{ $.Prefix }}{{ pascal .Name }}& FindChecked({{ fieldPrimitiveType .IDFieldType }} ID) const
    {
        const F{{ $.Prefix }}{{ pascal .Name }}* Row = Find(ID);
        check(Row != nullptr);
        return *Row;
    }
{{- end }}

    {{ $extraBody := list $.Prefix .Name "_EXTRA_BODY" | join "" | upper -}}
    //NESTCSV:{{ $extraBody }}_START
    {{ index $.ExistingContent $extraBody | default "" }}
    //NESTCSV:{{ $extraBody }}_END
};
{{- end -}}
